package com.lost.zou.pedometer.data.model.database.core;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PedometerCardLog".
*/
public class PedometerCardEntityDao extends AbstractDao<PedometerCardEntity, Long> {

    public static final String TABLENAME = "PedometerCardLog";

    /**
     * Properties of entity PedometerCardEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Calories = new Property(1, Double.class, "calories", false, "CALORIES");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property StepCount = new Property(3, Integer.class, "stepCount", false, "STEP_COUNT");
        public final static Property DistanceInMeters = new Property(4, Double.class, "distanceInMeters", false, "DISTANCE_IN_METERS");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property TargetStepCount = new Property(6, Integer.class, "targetStepCount", false, "TARGET_STEP_COUNT");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
    };


    public PedometerCardEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PedometerCardEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PedometerCardLog\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CALORIES\" REAL," + // 1: calories
                "\"DATE\" TEXT NOT NULL UNIQUE ," + // 2: date
                "\"STEP_COUNT\" INTEGER," + // 3: stepCount
                "\"DISTANCE_IN_METERS\" REAL," + // 4: distanceInMeters
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"TARGET_STEP_COUNT\" INTEGER," + // 6: targetStepCount
                "\"STATUS\" INTEGER);"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PedometerCardLog\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PedometerCardEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double calories = entity.getCalories();
        if (calories != null) {
            stmt.bindDouble(2, calories);
        }
        stmt.bindString(3, entity.getDate());
 
        Integer stepCount = entity.getStepCount();
        if (stepCount != null) {
            stmt.bindLong(4, stepCount);
        }
 
        Double distanceInMeters = entity.getDistanceInMeters();
        if (distanceInMeters != null) {
            stmt.bindDouble(5, distanceInMeters);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer targetStepCount = entity.getTargetStepCount();
        if (targetStepCount != null) {
            stmt.bindLong(7, targetStepCount);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PedometerCardEntity readEntity(Cursor cursor, int offset) {
        PedometerCardEntity entity = new PedometerCardEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // calories
            cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // stepCount
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // distanceInMeters
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // targetStepCount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PedometerCardEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCalories(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setDate(cursor.getString(offset + 2));
        entity.setStepCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDistanceInMeters(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTargetStepCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PedometerCardEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PedometerCardEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
